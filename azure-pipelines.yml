# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- "*"

variables:
  project_name: 'cython-pocketfft'

  # Name of an "Azure Pipeline Artifact Feed" (do I care about this?)
  pypiArtifactFeed: 'TestPyPI-artifact-feed'

  # Name of a "Pipeline Service Connection" that's set up to upload to PyPI (this is all I should care about)
  pypiServiceConnection: 'TestPyPI-service-connection'

  # The "EndpointName" field for the "Service Connection" above. Tooltip says...
  # "Unique repository name used for twine upload. Spaces and special characters are not allowed."
  # So this must be the repository argument to give to twine
  pypiEndpointName: 'test-cython-pocketfft'

  # "artifactFeed" parameter for TwineAuthenticate task
  twineAuthArtifactFeed: ${{ variables.pypiArtifactFeed }}

  # "pythonUploadServiceConnection" parameter for TwineAuthenticate task
  twineAuthServiceConnection: ${{ variables.pypiServiceConnection }}

  # The --repository argument for twine. Seems like this should be $(pypiEndpointName)
  # But this makes me think it should be $(pypiServiceConnection)...
  # https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/package/twine-authenticate?view=azure-devops#publish-python-distribution-to-official-python-registry
  #
  # But this makes me think it should be $(pypiServiceConnection)/$(pypiEndpointName)...
  # https://github.com/microsoft/azure-pipelines-tasks/blob/ce15c9039fd3cfd340eaad82a5062fcf1d0de1e2/Tasks/TwineAuthenticateV1/task.json#L5
  # "Add '-r FeedName/EndpointName --config-file..."
  twineUploadRepo: ${{ variables.pypiEndpointName }}

jobs:
- job: generator
  steps:
  - checkout: none
  - task: PythonScript@0
    name: strat
    inputs:
      scriptSource: 'inline'
      script: |
        import json
        PLATFORMS = {
            'linux':'ubuntu-latest',
            # 'mac':'macOS-latest',
            'windows':'windows-latest',
        }
        PY_VERSIONS = ['3.5', '3.6', '3.7']
        d = {}
        artifact_names = []
        for pl_key, pl_img in PLATFORMS.items():
            for py_v in PY_VERSIONS:
                if py_v == '3.5' and pl_key == 'windows':
                    continue
                job_key = '{}-Python{}'.format(pl_key, ''.join(py_v.split('.')))
                d[job_key] = {
                    'imageName':pl_img,
                    'python.version':py_v,
                    'artifact_name':'dist-{}-{}'.format(pl_key, py_v)
                }
                artifact_names.append(d[job_key]['artifact_name'])
        s = json.dumps(d)
        print('##vso[task.setVariable variable=mtrx;isOutput=true]{}'.format(s))
        s = json.dumps({'artifact_names':artifact_names})
        print('##vso[task.setVariable variable=metadata;isOutput=true]{}'.format(s))

- job: compile
  dependsOn: generator
  pool:
    vmImage: $(imageName)
  strategy:
    matrix: $[ dependencies.generator.outputs['strat.mtrx'] ]
  steps:
  - bash: echo $(build_types)
  - template: 'ci/templates/build-steps.yml'
    parameters:
      use_cython: 'true'
      test_mode: 'develop'

- job: testFromWheel
  dependsOn:
  - generator
  - compile
  pool:
    vmImage: $(imageName)
  strategy:
    matrix: $[ dependencies.generator.outputs['strat.mtrx'] ]
  steps:
  - template: 'ci/templates/build-steps.yml'
    parameters:
      test_mode: 'wheel'

- job: testFromSDist
  dependsOn:
  - generator
  - compile
  pool:
    vmImage: $(imageName)
  strategy:
    matrix: $[ dependencies.generator.outputs['strat.mtrx'] ]
  steps:
  - template: 'ci/templates/build-steps.yml'
    parameters:
      test_mode: 'sdist'

- job: deploy
  dependsOn:
  - generator
  - compile
  # !!! UNCOMMENT THESE BEFORE ENABLING
  # - testFromWheel
  # - testFromSDist
  variables:
    python.version: '3.7'
  steps:
  - task: DownloadPipelineArtifact@2
    inputs:
      targetPath: $(System.DefaultWorkingDirectory)/dist-temp
  - script: |
      mkdir -p $(System.DefaultWorkingDirectory)/dist
      cp -u $(System.DefaultWorkingDirectory)/dist-temp/**/* $(System.DefaultWorkingDirectory)/dist/
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
    displayName: 'Use Python $(python.version)'
  - script: pip install twine
    displayName: 'install twine'
  - task: TwineAuthenticate@1
    inputs:
      artifactFeed: $(twineAuthArtifactFeed)
      pythonUploadServiceConnection: $(twineAuthServiceConnection)
  - script: python3.7 ci/fix_pypirc.py $(PYPIRC_PATH)
    displayName: 'Fix pypirc'
  - script: twine upload -r $(twineUploadRepo) --config-file $(PYPIRC_PATH) --skip-existing dist/*
    displayName: 'twine upload'
