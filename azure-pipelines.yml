# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- "*"

variables:
  project_name: 'cython-pocketfft'
  pypiFeed: 'Test PyPI'

jobs:
- job: generator
  steps:
  - checkout: none
  - task: PythonScript@0
    name: strat
    inputs:
      scriptSource: 'inline'
      script: |
        import json
        PLATFORMS = {
            'linux':'ubuntu-latest',
            # 'mac':'macOS-latest',
            'windows':'windows-latest',
        }
        PY_VERSIONS = ['3.5', '3.6', '3.7']
        d = {}
        artifact_names = []
        for pl_key, pl_img in PLATFORMS.items():
            for py_v in PY_VERSIONS:
                if py_v == '3.5' and pl_key == 'windows':
                    continue
                job_key = '{}-Python{}'.format(pl_key, ''.join(py_v.split('.')))
                d[job_key] = {
                    'imageName':pl_img,
                    'python.version':py_v,
                    'artifact_name':'dist-{}-{}'.format(pl_key, py_v)
                }
                artifact_names.append(d[job_key]['artifact_name'])
        s = json.dumps(d)
        print('##vso[task.setVariable variable=mtrx;isOutput=true]{}'.format(s))
        s = json.dumps({'artifact_names':artifact_names})
        print('##vso[task.setVariable variable=metadata;isOutput=true]{}'.format(s))

- job: compile
  dependsOn: generator
  pool:
    vmImage: $(imageName)
  strategy:
    matrix: $[ dependencies.generator.outputs['strat.mtrx'] ]
  steps:
  - bash: echo $(build_types)
  - template: 'ci/templates/build-steps.yml'
    parameters:
      use_cython: 'true'
      test_mode: 'develop'

- job: testFromWheel
  dependsOn:
  - generator
  - compile
  pool:
    vmImage: $(imageName)
  strategy:
    matrix: $[ dependencies.generator.outputs['strat.mtrx'] ]
  steps:
  - template: 'ci/templates/build-steps.yml'
    parameters:
      test_mode: 'wheel'

- job: testFromSDist
  dependsOn:
  - generator
  - compile
  pool:
    vmImage: $(imageName)
  strategy:
    matrix: $[ dependencies.generator.outputs['strat.mtrx'] ]
  steps:
  - template: 'ci/templates/build-steps.yml'
    parameters:
      test_mode: 'sdist'

- job: deploy
  dependsOn:
  - generator
  - testFromWheel
  - testFromSDist
  variables:
    metadata: $[ dependencies.generator.outputs['strat.metadata'] ]
  steps:
  - task: DownloadPipelineArtifact@2
    inputs:
      targetPath: $(System.DefaultWorkingDirectory)/dist-temp
  - script: |
      mkdir -p $(System.DefaultWorkingDirectory)/dist
      cp -u $(System.DefaultWorkingDirectory)/dist-temp/**/* $(System.DefaultWorkingDirectory)/dist/
  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: $(System.DefaultWorkingDirectory)/dist
      artifactName: dists
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.7'
    displayName: 'Use Python 3.7'
  - script: pip install twine
    displayName: 'install twine'
  - task: TwineAuthenticate@1
    inputs:
      pythonUploadServiceConnection: $(pypiFeed)
  - script: twine upload -r $(pypiFeed) dist/* --config-file $(PYPIRC_PATH)
