# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- "*"

jobs:
- job: generator
  steps:
  - checkout: none
  - task: PythonScript@0
    name: strat
    inputs:
      scriptSource: 'inline'
      script: |
        import json
        PY_VERSIONS = ['3.5', '3.6', '3.7']
        SDIST_VERSION = '3.7'
        d = {}
        for v in PY_VERSIONS:
            key = 'Python{}'.format(''.join(v.split('.')))
            build_types = ['wheel']
            if v == SDIST_VERSION:
                build_types.append('sdist')
            d[key] = {'python-version':v, 'build_types':' '.join(build_types)}
        s = json.dumps(d)
        print('##vso[task.setVariable variable=mtrx;isOutput=true]{}'.format(s))

- job: compile
  dependsOn: generator
  pool:
    vmImage: 'ubuntu-latest'
  strategy:
    matrix: $[ dependencies.generator.outputs['strat.mtrx'] ]
  steps:
  - template: 'ci/templates/build-steps.yml'
    parameters:
      python.version: '$(python.version)'
      use_cython: 'true'
      build_types: '$(build_types)'
      test_mode: 'develop'

- job: testFromWheel
  dependsOn:
  - generator
  - compile
  pool:
    vmImage: 'ubuntu-latest'
  strategy:
    matrix: $[ dependencies.generator.outputs['strat.mtrx'] ]
  steps:
  - template: 'ci/templates/build-steps.yml'
    parameters:
      python.version: '$(python.version)'
      test_mode: 'wheel'

- job: testFromSDist
  dependsOn:
  - generator
  - compile
  pool:
    vmImage: 'ubuntu-latest'
  strategy:
    matrix: $[ dependencies.generator.outputs['strat.mtrx'] ]
  steps:
  - template: 'ci/templates/build-steps.yml'
    parameters:
      python.version: '$(python.version)'
      test_mode: 'sdist'
