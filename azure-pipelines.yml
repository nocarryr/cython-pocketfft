# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- "*"

jobs:
# - job: generator
#   steps:
#   - checkout: none
#   - task: PythonScript@0
#     name: strat
#     inputs:
#       scriptSource: 'inline'
#       script: |
#         import json
#         PY_VERSIONS = ['3.5', '3.6', '3.7']
#         d = {
#             'Python{}'.format(''.join(v.split('.'))): {'python-version':v}
#             for v in PY_VERSIONS}
#         s = json.dumps(d)
#         print('##vso[task.setVariable variable=mtrx;isOutput=true]{}'.format(s))

- job: compile
  # dependsOn: generator
  pool:
    vmImage: 'ubuntu-latest'
  # strategy:
  #   matrix: $[ dependencies.generator.outputs['strat.mtrx'] ]
  strategy:
    matrix:
      Python35:
        python.version: '3.5'
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
    displayName: 'Use Python $(python.version)'

  - script: python -m pip install -U pip setuptools wheel && pip install -r requirements.txt && pip install pytest
    displayName: 'Install dependencies'

  - script: python setup.py build_ext --inplace --use-cython && python setup.py sdist bdist_wheel
    displayName: 'Build Extenstions'

  - publish: $(System.DefaultWorkingDirectory)/dist
    artifact: dist-$(python.version)

- job: testFromWheel
  dependsOn: compile
  pool:
    vmImage: 'ubuntu-latest'
  # strategy:
  #   matrix: $[ dependencies.generator.outputs['strat.mtrx'] ]
  strategy:
    matrix:
      Python35:
        python.version: '3.5'
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
    displayName: 'Use Python $(python.version)'

  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: dist-$(python.version)
      targetPath: $(System.DefaultWorkingDirectory)/dist

  - script: python -m pip install -U pip setuptools wheel && pip install -r requirements.txt
    displayName: 'Install dependencies'

  - script: pip install dist/*.whl
    displayName: 'Install wheel'

  - script: python build_tests.py
    displayName: 'Build Tests'

  - script: py.test
    displayName: 'Run Tests'
