steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
  displayName: 'Use Python $(python.version)'

- script: python -m pip install -U pip setuptools wheel && pip install -r requirements.txt
  displayName: 'Install dependencies'

- script: python setup.py build_ext --inplace --use-cython --cython-trace
  displayName: 'Build Extenstions'

- script: pip install -e .
  displayName: 'Install develop mode'

- script: python build_tests.py
  displayName: 'Build Tests'

- script: py.test --junitxml=junit/test-results.xml --cov-config=.coveragerc --cov=cypocketfft --cov-report xml
  displayName: 'Run coverage tests'

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testResultsFiles: '**/test-*.xml'
    testRunTitle: 'Publish test results for Python $(python.version)'

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'

- script: pip install PyYaml coveralls
  displayName: Install coveralls

- task: PythonScript@0
  displayName: Write coveralls config
  inputs:
    scriptSource: 'inline'
    script: |
        import os
        import yaml
        keys = ['service_name', 'service_number']
        IS_PR = os.environ.get('IS_PR_BUILD')
        if IS_PR:
            keys.append('service_pull_request')
        else:
            keys.append('service_job_id')
        envkeys = {key:'_'.join(['COVERALLS', key.upper()]) for key in keys}
        conf = {key:os.environ[envkey] for key, envkey in envkeys.items()}
        conf['parallel'] = True
        print('coveralls config: {}'.format(conf))
        with open('.coveralls.yml', 'w') as f:
            f.write(yaml.dump(conf, Dumper=yaml.Dumper))

- bash: coveralls
  env:
    COVERALLS_REPO_TOKEN: $(coveralls.repo_token)
    GIT_BRANCH: $(Build.SourceBranchName)
  displayName: Coveralls
