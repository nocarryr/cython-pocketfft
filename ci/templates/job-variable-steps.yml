parameters:
  jobs: []

jobs:
- job: generator
  steps:
  - script: |
      BUILD_IS_TAG='true'
      git describe --tags --candidates=0 || BUILD_IS_TAG='false'
      echo "##vso[task.setvariable variable=BUILD_IS_TAG;isOutput=true]$BUILD_IS_TAG"
    name: tag_check
  - task: PythonScript@0
    name: strat
    inputs:
      scriptSource: 'inline'
      script: |
        import json
        PLATFORMS = {
            'linux':'ubuntu-latest',
            'mac':'macOS-latest',
            'windows':'windows-latest',
        }
        PY_VERSIONS = ['3.5', '3.6', '3.7']
        d = {}
        artifact_names = []
        for pl_key, pl_img in PLATFORMS.items():
            for py_v in PY_VERSIONS:
                if py_v == '3.5' and pl_key == 'windows':
                    continue
                job_key = '{}-Python{}'.format(pl_key, ''.join(py_v.split('.')))
                d[job_key] = {
                    'imageName':pl_img,
                    'platform':pl_key,
                    'python.version':py_v,
                    'artifact_name':'dist-{}-{}'.format(pl_key, py_v)
                }
                artifact_names.append(d[job_key]['artifact_name'])
        s = json.dumps(d)
        print('##vso[task.setVariable variable=mtrx;isOutput=true]{}'.format(s))
        s = json.dumps({'artifact_names':artifact_names})
        print('##vso[task.setVariable variable=metadata;isOutput=true]{}'.format(s))

- ${{ each job in parameters.jobs }}: # Each job
  - ${{ each pair in job }}:          # Insert all properties other than "variables"
      ${{ if and(ne(pair.key, 'variables'), ne(pair.key, 'dependsOn')) }}:
        ${{ pair.key }}: ${{ pair.value }}
    dependsOn:
      - generator
      - ${{ if job.dependsOn }}:
        - ${{ job.dependsOn }}
    variables:
      BUILD_IS_TAG: $[ eq(dependencies.generator.outputs['tag_check.BUILD_IS_TAG'], 'true') ]
      strat.mtrx: $[ dependencies.generator.outputs['strat.mtrx'] ]
      ${{ insert }}: ${{ job.variables }}
