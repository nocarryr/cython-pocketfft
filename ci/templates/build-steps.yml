
steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
  displayName: 'Use Python $(python.version)'

- script: python -m pip install -U pip setuptools wheel && pip install -r requirements.txt
  displayName: 'Install dependencies'

- task: DownloadPipelineArtifact@2
  inputs:
    targetPath: $(System.DefaultWorkingDirectory)/dist-temp

- task: CopyFiles@2
  inputs:
    sourceFolder: $(System.DefaultWorkingDirectory)/dist-temp
    contents: '**'
    targetFolder: $(System.DefaultWorkingDirectory)/dist
    overWrite: true
    flattenFolders: true

- ${{ if and(eq(variables.platform, 'linux'), eq(variables['manylinux.enabled'], 'true')) }}:
  - script: rm dist/*-linux_*.whl
    displayName: 'Remove platform wheels'

- script: pip install --only-binary $(project_name) --no-index --find-links dist/ $(project_name)
  displayName: 'Install wheel'

- script: python build_tests.py
  displayName: 'Build Tests'

- script: py.test --junitxml=junit/test-results-wheel.xml
  displayName: 'Run wheel tests'

- script: pip uninstall -y $(project_name)
  displayName: 'Uninstall $(project_name)'
  condition: succeededOrFailed()

- script: pip install --no-binary $(project_name) --no-index --find-links dist/ $(project_name)
  displayName: 'Install sdist'

- script: python build_tests.py
  displayName: 'Build Tests'

- script: py.test --junitxml=junit/test-results-sdist.xml
  displayName: 'Run sdist tests'

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testResultsFiles: '**/test-*.xml'
    testRunTitle: 'Test results for Python$(python.version)-$(platform)'
    mergeTestResults: true
